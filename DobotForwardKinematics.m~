function p0T = DobotForwardKinematics(q)
% finds p0T given joint angles q
% INPUTS:
%   q - 3 joint angles
% OUTPUTS:
%   p0T - xyz desired coordinates, NOT CALIBRATED

global p01 p12 p23 p3T

% p01 = [0;0;0];
% p12 = [0;0;0];
% p23 = [0;0;13.5];
% p3T = [0;16;0];

addpath('general-robotics-toolbox-master');

ex=[1;0;0]; ey=[0;1;0]; ez=[0;0;1]; zv=[0;0;0];
% h1 = ez; h2 = -ex; h3 = -ex;
% p0T = p01 + rot(h1,q(1))*(p12 + rot(h2,q(2))*p23 + rot(h3,q(3))*p3T);

h1 = ez; h2 = -ex; h3 = -ex;
p0T = p01 + rot(h1,q(1))*rot(h2,q(2))*(p23 + rot(h3,

end

function [ p, R ] = fwdkindobot( q1, q2, q3 , d)
%fwdkindobot Outputs rotation and distance from origin
%   from Dobot's joint angles
ex = [1; 0; 0];
ey = [0; 1; 0];
ez = [0; 0; 1];

%all lengths are in mm
l1 = 103;
l2 = 135;
l3 = 160;
Lg = 56;  %length from point T to q4 rotation
%d = 115;  %pen length

R = rot(ez, q1)*rot(ex, q2)*rot(ex, q3);
p = l1*ez + rot(ez,q1)*rot(ey,q2)*l2*ez + rot(ez,q1)*rot(ey,q2)*rot(ey,q3)*l3*ex+[Lg*cos(q1);Lg*sin(q1);-d];
end